"""
Enhanced PDF Report Generator with Charts and Advanced Styling
"""

from fpdf import FPDF
from datetime import datetime
from urllib.parse import urlparse
import os

class CyberSecurityPDFReport(FPDF):
    def __init__(self):
        super().__init__()
        self.set_auto_page_break(auto=True, margin=15)
        
        # Define color palette
        self.colors = {
            'cyber_green': (0, 255, 65),
            'electric_blue': (0, 102, 255),
            'neon_pink': (255, 0, 102),
            'dark_bg': (10, 10, 10),
            'card_bg': (26, 26, 26),
            'light_gray': (176, 176, 176),
            'white': (255, 255, 255),
            'red': (255, 0, 0),
            'orange': (255, 170, 0),
            'success': (0, 255, 65),
            'warning': (255, 170, 0),
            'danger': (255, 0, 102)
        }
    
    def header(self):
        """Custom header for each page"""
        # Dark header background
        self.set_fill_color(*self.colors['dark_bg'])
        self.rect(0, 0, 210, 25, 'F')
        
        # Logo and title
        self.set_text_color(*self.colors['cyber_green'])
        self.set_font('Arial', 'B', 16)
        self.set_xy(10, 8)
        self.cell(0, 10, 'GRC SCANNER - SECURITY REPORT', align='C')
        
        # Line separator
        self.set_draw_color(*self.colors['cyber_green'])
        self.set_line_width(0.5)
        self.line(10, 25, 200, 25)
        
        self.ln(20)
    
    def footer(self):
        """Custom footer for each page"""
        self.set_y(-20)
        
        # Footer background
        self.set_fill_color(*self.colors['card_bg'])
        self.rect(0, self.get_y(), 210, 20, 'F')
        
        # Footer text
        self.set_text_color(*self.colors['light_gray'])
        self.set_font('Arial', '', 8)
        self.cell(0, 10, f'Page {self.page_no()} | Generated by GRC Scanner | {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', align='C')
    
    def add_section_header(self, title, icon, color_key='cyber_green'):
        """Add a styled section header"""
        self.ln(5)
        
        # Section header background
        self.set_fill_color(*self.colors[color_key])
        self.set_text_color(*self.colors['white'] if color_key != 'cyber_green' else self.colors['dark_bg'])
        self.set_font('Arial', 'B', 12)
        
        # Add some padding - remove emoji for compatibility
        icon_text = {
            '🔒': '[SECURITY]',
            '🐛': '[OWASP]',
            '🌐': '[NETWORK]',
            '📊': '[SUMMARY]',
            '💡': '[RECOMMENDATIONS]'
        }.get(icon, '[INFO]')
        
        self.cell(0, 10, f'{icon_text} {title}', ln=True, align='L', fill=True)
        self.ln(3)
    
    def add_info_box(self, title, content, color_key='card_bg'):
        """Add an information box"""
        # Box background
        self.set_fill_color(*self.colors[color_key])
        box_height = 8 + (len(content) * 6)
        
        # Draw box
        current_y = self.get_y()
        self.rect(10, current_y, 190, box_height, 'F')
        
        # Title
        self.set_text_color(*self.colors['cyber_green'])
        self.set_font('Arial', 'B', 10)
        self.set_xy(15, current_y + 2)
        self.cell(0, 6, title, ln=True)
        
        # Content
        self.set_text_color(*self.colors['white'])
        self.set_font('Arial', '', 9)
        for line in content:
            self.set_x(15)
            self.cell(0, 6, line, ln=True)
        
        self.ln(5)
    
    def add_status_item(self, text, status='success'):
        """Add a status item with colored indicator"""
        # Status colors and icons - use ASCII compatible symbols
        status_config = {
            'success': {'color': 'success', 'icon': '[+]'},
            'warning': {'color': 'warning', 'icon': '[!]'},
            'danger': {'color': 'danger', 'icon': '[-]'},
            'info': {'color': 'electric_blue', 'icon': '[i]'}
        }
        
        config = status_config.get(status, status_config['info'])
        
        self.set_text_color(*self.colors[config['color']])
        self.set_font('Arial', '', 10)
        self.cell(0, 6, f"{config['icon']} {text}", ln=True, align='L')
    
    def add_security_score_gauge(self, score):
        """Add a visual security score gauge"""
        self.ln(5)
        
        # Determine score color
        if score >= 80:
            score_color = 'success'
            score_text = 'EXCELLENT'
        elif score >= 60:
            score_color = 'warning'
            score_text = 'GOOD'
        elif score >= 40:
            score_color = 'orange'
            score_text = 'MODERATE'
        else:
            score_color = 'danger'
            score_text = 'NEEDS IMPROVEMENT'
        
        # Score background
        self.set_fill_color(*self.colors['card_bg'])
        self.rect(10, self.get_y(), 190, 25, 'F')
        
        # Score bar background
        bar_y = self.get_y() + 8
        self.set_fill_color(50, 50, 50)
        self.rect(15, bar_y, 150, 8, 'F')
        
        # Score bar fill
        bar_width = (score / 100) * 150
        self.set_fill_color(*self.colors[score_color])
        self.rect(15, bar_y, bar_width, 8, 'F')
        
        # Score text
        self.set_text_color(*self.colors[score_color])
        self.set_font('Arial', 'B', 14)
        self.set_xy(170, self.get_y() + 5)
        self.cell(0, 10, f'{score}/100', align='L')
        
        self.set_xy(15, self.get_y() + 18)
        self.set_font('Arial', 'B', 10)
        self.cell(0, 6, f'Security Rating: {score_text}', align='L')
        
        self.ln(30)

def generate_enhanced_pdf_report(scan_id, url, security_headers_report, owasp_report, port_scan_report):
    """Generate an enhanced PDF report with modern styling"""
    
    pdf = CyberSecurityPDFReport()
    pdf.add_page()
    
    # Report title and info
    pdf.set_text_color(*pdf.colors['cyber_green'])
    pdf.set_font('Arial', 'B', 20)
    pdf.cell(0, 15, 'CYBERSECURITY ASSESSMENT REPORT', ln=True, align='C')
    
    # Target information
    pdf.add_info_box('SCAN TARGET INFORMATION', [
        f'URL: {url}',
        f'Hostname: {urlparse(url).hostname}',
        f'Scan ID: {scan_id}',
        f'Scan Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")}',
        f'Report Type: Comprehensive Security Analysis'
    ])
    
    # Security Headers Analysis
    pdf.add_section_header('SECURITY HEADERS ANALYSIS', '[SECURITY]', 'cyber_green')
    
    if "Security Headers" in security_headers_report:
        for item in security_headers_report["Security Headers"]:
            status = 'success' if '[+]' in item else 'danger'
            clean_text = item.replace('[+]', '').replace('[-]', '').strip()
            pdf.add_status_item(clean_text, status)
    
    # OWASP Top 10 Analysis
    if "OWASP Top 10" in owasp_report and owasp_report["OWASP Top 10"]:
        pdf.add_section_header('OWASP TOP 10 VULNERABILITIES', '[OWASP]', 'warning')
        
        for item in owasp_report["OWASP Top 10"]:
            clean_text = item.replace('[-]', '').strip()
            pdf.add_status_item(clean_text, 'warning')
    
    # Port Scan Analysis
    if "Port Scan" in port_scan_report and port_scan_report["Port Scan"]:
        pdf.add_section_header('NETWORK PORT ANALYSIS', '[NETWORK]', 'electric_blue')
        
        for item in port_scan_report["Port Scan"]:
            status = 'info' if '[+]' in item else 'danger'
            clean_text = item.replace('[+]', '').replace('[-]', '').strip()
            pdf.add_status_item(clean_text, status)
    
    # Security Summary and Score
    pdf.add_section_header('SECURITY ASSESSMENT SUMMARY', '[SUMMARY]', 'neon_pink')
    
    # Calculate metrics
    total_headers = len(security_headers_report.get("Security Headers", []))
    secure_headers = len([item for item in security_headers_report.get("Security Headers", []) if "[+]" in item])
    total_owasp = len(owasp_report.get("OWASP Top 10", []))
    open_ports = len([item for item in port_scan_report.get("Port Scan", []) if "[+]" in item])
    
    # Security score calculation
    base_score = 100
    header_penalty = (total_headers - secure_headers) * 8
    owasp_penalty = total_owasp * 12
    port_penalty = max(0, (open_ports - 2) * 5)  # Allow 2 common ports without penalty
    
    security_score = max(0, base_score - header_penalty - owasp_penalty - port_penalty)
    
    # Add summary metrics
    pdf.add_info_box('SECURITY METRICS', [
        f'Security Headers Implemented: {secure_headers}/{total_headers}',
        f'OWASP Vulnerabilities Found: {total_owasp}',
        f'Open Network Ports: {open_ports}',
        f'Overall Risk Level: {"LOW" if security_score >= 80 else "MEDIUM" if security_score >= 60 else "HIGH"}'
    ])
    
    # Add security score gauge
    pdf.add_security_score_gauge(security_score)
    
    # Recommendations section
    pdf.add_section_header('SECURITY RECOMMENDATIONS', '[RECOMMENDATIONS]', 'electric_blue')
    
    recommendations = []
    
    if secure_headers < total_headers:
        recommendations.append('Implement missing security headers to prevent common attacks')
    
    if total_owasp > 0:
        recommendations.append('Address OWASP Top 10 vulnerabilities immediately')
    
    if open_ports > 3:
        recommendations.append('Review and close unnecessary open ports')
    
    if security_score < 70:
        recommendations.append('Conduct regular security assessments and penetration testing')
    
    recommendations.extend([
        'Enable HTTPS with strong TLS configuration',
        'Implement Content Security Policy (CSP)',
        'Regular security monitoring and logging',
        'Keep all software and dependencies updated'
    ])
    
    for i, rec in enumerate(recommendations[:6], 1):  # Limit to 6 recommendations
        pdf.add_status_item(f'{i}. {rec}', 'info')
    
    # Generate file
    report_path = f"reports/{scan_id}_{urlparse(url).hostname}_enhanced_security_report.pdf"
    pdf.output(report_path)
    return report_path